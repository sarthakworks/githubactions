name: AI Code Review

on:
  pull_request:
    branches: [main, develop] # Customize branches to trigger on

jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Or your preferred Python version

      - name: Install necessary packages
        run: |
          python -m pip install --upgrade pip
          pip install openai requests  # Install OpenAI and requests libraries

      - name: Run AI code review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # Store your OpenAI API key in GitHub secrets
        run: |
          python <<EOF
          import os
          import openai
          import requests
          import subprocess

          openai.api_key = os.getenv("OPENAI_API_KEY")

          def get_diff(base_branch, head_branch):
            diff = subprocess.run(["git", "diff", "--name-only", base_branch, head_branch], capture_output=True, text=True, check=True).stdout.strip()
            changed_files = diff.splitlines()
            file_diffs = {}
            for file in changed_files:
                file_diff = subprocess.run(["git", "diff", base_branch, head_branch, "--", file], capture_output=True, text=True, check=True).stdout.strip()
                file_diffs[file] = file_diff
            return file_diffs

          def generate_review(diffs):
            review_text = ""
            for file, diff in diffs.items():
                review_text += f"## {file}\n\n"
                review_text += f"```diff\n{diff}\n```\n\n"

                try:
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",  # Or another suitable model
                        messages=[
                            {"role": "system", "content": "You are a helpful and strict code reviewer.  Provide specific suggestions for improvements.  Focus on code quality, best practices, potential bugs, and security vulnerabilities."},
                            {"role": "user", "content": f"Review the following code diff:\n\n{diff}"},
                        ],
                        max_tokens=500, # Adjust as needed
                    )
                    review_text += f"{response.choices[0].message.content}\n\n"
                except Exception as e:
                    review_text += f"Error during AI review: {e}\n\n"

            return review_text

          base_branch = "${{ github.event.pull_request.base.sha }}"
          head_branch = "${{ github.event.pull_request.head.sha }}"

          diffs = get_diff(base_branch, head_branch)
          review = generate_review(diffs)

          # Post the review as a GitHub comment (using the GitHub API is more robust)
          github_token = "${{ secrets.GITHUB_TOKEN }}"
          pull_request_number = "${{ github.event.pull_request.number }}"
          url = f"https://api.github.com/repos/${{ github.repository }}/issues/{pull_request_number}/comments"

          headers = {
              "Authorization": f"Bearer {github_token}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28"
          }

          data = {"body": review}
          response = requests.post(url, headers=headers, json=data)

          if response.status_code != 201:
              print(f"Error posting review: {response.status_code} - {response.text}")

          EOF